
// Includes
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "fft.h"
#include "xgpio.h"

#define XILINX_PI 3.1415926 //3.1415926???     3.141592653589793238462643383279
#define DEFAULT_FFT_LENGTH 16384

// Private data

// Object definition
typedef struct fft
{
	fft_sw_hw_t   sw_hw;
	fft_fwd_inv_t fwd_inv;
	int           num_pts;
	int           scale_sch;
} fft_t;

// Private functions
static int is_power_of_2(int x)
// Determines if the input integer is a power of two.
{
	while ((x % 2 == 0) && (x > 1))
	{
		x /= 2;
	}

	return (x == 1);
}

static int int_log2(int x)
// Computes the log2 of the input integer. Remainder is floored.
{
	int log2_N = 0;

	x--;
	for (log2_N = 0;  x > 0; log2_N++)
	{
		x >>= 1;
	}

	return log2_N;
}

static int init_gpio(XGpio* p_gpio_inst, int gpio_device_id)
{
	// Local variables
	int status = 0;

	// Initialize driver
	status = XGpio_Initialize(p_gpio_inst, gpio_device_id);
	if (status != XST_SUCCESS)
	{
		xil_printf("ERROR! Initialization of AXI GPIO instance failed.\n\r");
		return FFT_GPIO_INIT_FAIL;
	}

	return FFT_SUCCESS;
}




void fft_set_sw_hw(fft_t* p_fft_inst, fft_sw_hw_t sw_hw)
{
	p_fft_inst->sw_hw = sw_hw;
}

fft_sw_hw_t fft_get_sw_hw(fft_t* p_fft_inst)
{
	return (p_fft_inst->sw_hw);
}

void fft_set_fwd_inv(fft_t* p_fft_inst, fft_fwd_inv_t fwd_inv)
{
	p_fft_inst->fwd_inv = fwd_inv;
}

fft_fwd_inv_t fft_get_fwd_inv(fft_t* p_fft_inst)
{
	return (p_fft_inst->fwd_inv);
}


int fft_get_num_pts(fft_t* p_fft_inst)
{
	return (p_fft_inst->num_pts);
}

void fft_set_scale_sch(fft_t* p_fft_inst, int scale_sch)
{
	p_fft_inst->scale_sch = scale_sch;
}

int fft_get_scale_sch(fft_t* p_fft_inst)
{
	return (p_fft_inst->scale_sch);
}

int fft(fft_t* p_fft_inst, cplx_data_t* din, cplx_data_t* dout)
{

		//xil_printf("\n\r***ARM FFT***\n\r");

		int fft_length = fft_get_num_pts(p_fft_inst);

		float *data = (float*) malloc(sizeof(float)*fft_length*2);
		//xil_printf("Preparing input data...\n\r");
		prepare_data(fft_length, data, din);
		//xil_printf("Calculating FFT...\n\r");
		calculate_fft(data, fft_length, 1);
		//xil_printf("Formatting output data...\n\r");
		set_output(fft_length, data, dout);

		return FFT_SUCCESS;



}



void fft_print_params(fft_t* p_fft_inst)
{
	xil_printf("sw_hw     = %s\n\r", (p_fft_inst->sw_hw == ARM_FFT ? "ARM" : "FPGA"));
	xil_printf("fwd_inv   = %s\n\r", (p_fft_inst->fwd_inv == FFT_FORWARD ? "forward" : "inverse"));
	xil_printf("num_pts   = %d\n\r", p_fft_inst->num_pts);
	xil_printf("scale_sch = 0x%X\n\r", p_fft_inst->scale_sch);
}


void fft_print_result_buf(fft_t* p_fft_inst, cplx_data_t* result_buf)
{
	int i=0;

	for (i = 0; i < p_fft_inst->num_pts; i++)
	{
		printf("Xk(%d) = %f + j*%f\n\r", i, result_buf[i].data_re, result_buf[i].data_im);
	}

	//tmp = (cplx_data_t*)dma_accel_get_result_buf(p_fft_inst->periphs.p_dma_accel_inst);
}

void prepare_data(int n, float* data, cplx_data_t* din)
{
	int i;
	for (i=0; i<n; i++)
	{
		data[2*i] = din[i].data_re;
		data[2*i+1] = din[i].data_im;

		//printf("TESTE 1: %f + j*%f\n\r", data[(2*i)+1], data[(2*i)+2]);
	}
}
void calculate_fft(float* data, int nn, int isign)
{
	int n, mmax, m, j, istep, i;
	float wtemp, wr, wpr, wpi, wi, theta, temp;
	float tempr, tempi;

	// reverse-binary reindexing
	n = nn<<1;
	j=1;
	for (i=1; i<n; i+=2)
	{
		if (j>i)
		{
			temp = data[j-1]; data[j-1] = data[i-1]; data[i-1] = temp;
			temp = data[j]; data[j] = data[i]; data[i] = temp;
	    }
	    m = nn;
	    while (m>=2 && j>m)
	    {
	    	j -= m;
	        m >>= 1;
	    }
	    j += m;
	}

	// here begins the Danielson-Lanczos section
	mmax=2;
	while (n>mmax)
	{
		istep = mmax<<1;
	    theta = -(2*XILINX_PI/mmax);
	    wtemp = sinf(0.5*theta);
	    wpr = -2.0*wtemp*wtemp;
	    wpi = sinf(theta);
	    wr = 1.0;
	    wi = 0.0;
	    for (m=1; m < mmax; m += 2)
	    {
	    	for (i=m; i <= n; i += istep)
	    	{
	    		j=i+mmax;
	            tempr = wr*data[j-1] - wi*data[j];
	            tempi = wr * data[j] + wi*data[j-1];

	            data[j-1] = data[i-1] - tempr;
	            data[j] = data[i] - tempi;
	            data[i-1] += tempr;
	            data[i] += tempi;
	    	}
	        wtemp=wr;
	        wr += wr*wpr - wi*wpi;
	        wi += wi*wpr + wtemp*wpi;
	    }
	    mmax=istep;
	}
}

void set_output(int n, float* data, cplx_data_t* dout)
{
	int i;
	for (i=0; i<n; i++)
	{
		dout[i].data_re = data[2*i];
		dout[i].data_im = data[2*i+1];
	}
}

