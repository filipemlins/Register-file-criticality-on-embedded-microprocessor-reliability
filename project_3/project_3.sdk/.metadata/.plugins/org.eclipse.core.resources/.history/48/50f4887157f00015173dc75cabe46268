/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include <stdio.h>
#include "platform.h"
#include <time.h>
#include <stdlib.h>
#include <xtime_l.h>
#include "xtmrctr.h"
/* MULTIPLICACAO DE MATRIZES*/
#define MATRIX_SIZE 20

typedef unsigned long MATRIX_TYPE[MATRIX_SIZE][MATRIX_SIZE];

int mem[(sizeof(MATRIX_TYPE) / sizeof(int)) * 3];

MATRIX_TYPE* A = (MATRIX_TYPE *) &mem[(0 * sizeof(MATRIX_TYPE)) / sizeof(int)];

MATRIX_TYPE* B = (MATRIX_TYPE *) &mem[(1 * sizeof(MATRIX_TYPE)) / sizeof(int)];

MATRIX_TYPE* C = (MATRIX_TYPE *) &mem[(2 * sizeof(MATRIX_TYPE)) / sizeof(int)];

XTmrCtr timer_dev;
void init_matrix(MATRIX_TYPE M, int value) {
	int i, j;

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j++) {
			M[i][j] = value;
		}
	}
}

void multi_matrix(MATRIX_TYPE A, MATRIX_TYPE B, MATRIX_TYPE C) {
	int i, j;

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j++) {
			int k;
			int sum = 0;
			for (k = 0; k < MATRIX_SIZE; k++) {
				sum += A[i][k] * B[k][j];
			}
			C[i][j] = sum;
		}
	}

}

void print_matrix(MATRIX_TYPE C) {
	int i, j;

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j++) {
			printf("C[%d][%d] = %d \n\r", i, j, C[i][j]);

		}
	}
}





int main()
{
	XTime begin_time, end_time, run_time_sw;


	init_platform();

	begin_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);


	init_matrix( *A, 2);

	init_matrix( *B, 1);

	init_matrix( *C, 0);

	multi_matrix( *A, *B, *C );

 	end_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	run_time_sw = end_time - begin_time;

	printf("\n%lu\n", run_time_sw);


	print_matrix(*C);

    cleanup_platform();
    return 0;
}
