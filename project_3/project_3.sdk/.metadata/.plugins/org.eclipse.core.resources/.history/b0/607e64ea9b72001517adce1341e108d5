/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Cçonfigurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xscutimer.h"
#include "xparameters.h"
#include "xscugic.h"
#include "xil_io.h"
#include <time.h>
#include <stdlib.h>
#include <sys/time.h>

#define INTERRUPT_COUNT_TIMEOUT_VALUE 1

// Function prototypes
static void my_timer_interrupt_handler(void *CallBackRef);
unsigned int ContextAddress;
// Global variables
int InterruptCounter = 0;

/* MULTIPLICACAO DE MATRIZES*/
#define MATRIX_SIZE 5

typedef unsigned long MATRIX_TYPE[ MATRIX_SIZE ][ MATRIX_SIZE ];

int mem[(sizeof( MATRIX_TYPE) / sizeof( int )) * 3];

MATRIX_TYPE* A = (MATRIX_TYPE *)&mem[(0 * sizeof( MATRIX_TYPE) ) / sizeof( int )];

MATRIX_TYPE* B = (MATRIX_TYPE *)&mem[(1 * sizeof( MATRIX_TYPE) ) / sizeof( int )];

MATRIX_TYPE* C = (MATRIX_TYPE *)&mem[(2 * sizeof( MATRIX_TYPE) ) / sizeof( int )];



void init_matrix( MATRIX_TYPE M, int value)
{
	int i, j;

	for( i = 0; i < MATRIX_SIZE; i++)
	{
		for( j = 0; j < MATRIX_SIZE; j++ )
		{
			M[i][j] = value;
		}
	}
}

void multi_matrix( MATRIX_TYPE A, MATRIX_TYPE B, MATRIX_TYPE C )
{
	int i, j;

	for( i = 0; i < MATRIX_SIZE; i++)
	{
		for( j = 0; j < MATRIX_SIZE; j++)
		{
			int k;
			int sum = 0;
			for( k = 0; k < MATRIX_SIZE; k++ )
			{
				sum += A[i][k] * B[k][j];
			}
			C[i][j] = sum;
		}
	}

}

void print_matrix( MATRIX_TYPE C )
{
	int i, j;


	for( i = 0; i < MATRIX_SIZE; i++)
	{
		for( j = 0; j < MATRIX_SIZE; j++ )
		{
			printf("C[%d][%d] = %d \n\r", i, j, C[i][j]);

		}
	}
}


int main() {
	// Declare variables that we'll use later
	int Status;
	static unsigned int dump_regs[16]={0xFFFF};
	int i;
	int sum = 0;
	XScuTimer my_Timer;
	XScuTimer_Config *Timer_Config;

	XScuGic my_Gic;
	XScuGic_Config *Gic_Config;

	Gic_Config = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	XScuGic_CfgInitialize(&my_Gic, Gic_Config, Gic_Config->CpuBaseAddress);

	Timer_Config = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	XScuTimer_CfgInitialize(&my_Timer, Timer_Config, Timer_Config->BaseAddr);

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler, &my_Gic);
	XScuGic_Connect(&my_Gic, XPAR_SCUTIMER_INTR,
			(Xil_ExceptionHandler) my_timer_interrupt_handler,
			(void *) &my_Timer);

	XScuGic_Enable(&my_Gic, XPAR_SCUTIMER_INTR);

	XScuTimer_EnableInterrupt(&my_Timer);

	Xil_ExceptionEnable();


	// Load the timer with a value that represents one second of real time
	// HINT: The SCU Timer is clocked at half the frequency of the CPU.
	//XScuTimer_LoadTimer(&my_Timer, XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ);
	XScuTimer_LoadTimer(&my_Timer, XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ/1000000);

	// Enable Auto reload mode on the timer.  When it expires, it re-loads
	// the original value automatically.  This means that the timing interval
	// is never skewed by the time taken for the interrupt handler to run
	XScuTimer_EnableAutoReload(&my_Timer);



	__asm __volatile__("push {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, sp, pc}");
	__asm __volatile__ ("mov %[result], r0" : [result] "=r" (dump_regs[0]):);
	__asm __volatile__ ("mov %[result], r1" : [result] "=r" (dump_regs[1]):);
	__asm __volatile__ ("mov %[result], r2" : [result] "=r" (dump_regs[2]):);
	__asm __volatile__ ("mov %[result], r3" : [result] "=r" (dump_regs[3]):);
	__asm __volatile__ ("mov %[result], r4" : [result] "=r" (dump_regs[4]):);
	__asm __volatile__ ("mov %[result], r5" : [result] "=r" (dump_regs[5]):);
	__asm __volatile__ ("mov %[result], r6" : [result] "=r" (dump_regs[6]):);
	__asm __volatile__ ("mov %[result], r7" : [result] "=r" (dump_regs[7]):);
	__asm __volatile__ ("mov %[result], r8" : [result] "=r" (dump_regs[8]):);
	__asm __volatile__ ("mov %[result], r9" : [result] "=r" (dump_regs[9]):);
	__asm __volatile__ ("mov %[result], r10" : [result] "=r" (dump_regs[10]):);
	__asm __volatile__ ("mov %[result], r11" : [result] "=r" (dump_regs[11]):);
	__asm __volatile__ ("mov %[result], r12" : [result] "=r" (dump_regs[12]):);
	__asm __volatile__ ("mov %[result], lr" : [result] "=r" (dump_regs[13]):);
	__asm __volatile__ ("mov %[result], sp" : [result] "=r" (dump_regs[14]):);
	__asm __volatile__ ("mov %[result], pc" : [result] "=r" (dump_regs[15]):);

	for(i =0; i <= 15; i++){
		printf("dump[%d] = 0x%08x\n\r", i, dump_regs[i]);
	}

	ContextAddress = dump_regs[3];

	XScuTimer_Start(&my_Timer);

	// Create an infinite loop of nothing-ness
	while (1) {

		// There's nothing in here, the processor will just sit doing nothing.
		// The only way we'll see messages on the UART is if there's an interrupt.
		// In a real application, this is where the rest of our code would be.

		// Break out of the while loop

		/*	init_matrix( *A, 2);

		init_matrix( *B, 1);

		init_matrix( *C, 0);


		printf("\n\rStart Multiplication\n\r");

		XScuTimer_Start(&my_Timer);

		multi_matrix( *A, *B, *C );

		XScuTimer_Stop(&my_Timer);



		printf("finish Multiplication\n\r");

		print_matrix( *C );
*/

		if (InterruptCounter >= INTERRUPT_COUNT_TIMEOUT_VALUE) {
			// Break out of the while loop

			__asm __volatile__("push {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, sp, pc}");
			__asm __volatile__ ("mov %[result], r0" : [result] "=r" (dump_regs[0]):);
			__asm __volatile__ ("mov %[result], r1" : [result] "=r" (dump_regs[1]):);
			__asm __volatile__ ("mov %[result], r2" : [result] "=r" (dump_regs[2]):);
			__asm __volatile__ ("mov %[result], r3" : [result] "=r" (dump_regs[3]):);
			__asm __volatile__ ("mov %[result], r4" : [result] "=r" (dump_regs[4]):);
			__asm __volatile__ ("mov %[result], r5" : [result] "=r" (dump_regs[5]):);
			__asm __volatile__ ("mov %[result], r6" : [result] "=r" (dump_regs[6]):);
			__asm __volatile__ ("mov %[result], r7" : [result] "=r" (dump_regs[7]):);
			__asm __volatile__ ("mov %[result], r8" : [result] "=r" (dump_regs[8]):);
			__asm __volatile__ ("mov %[result], r9" : [result] "=r" (dump_regs[9]):);
			__asm __volatile__ ("mov %[result], r10" : [result] "=r" (dump_regs[10]):);
			__asm __volatile__ ("mov %[result], r11" : [result] "=r" (dump_regs[11]):);
			__asm __volatile__ ("mov %[result], r12" : [result] "=r" (dump_regs[12]):);
			__asm __volatile__ ("mov %[result], lr" : [result] "=r" (dump_regs[13]):);
			__asm __volatile__ ("mov %[result], sp" : [result] "=r" (dump_regs[14]):);
			__asm __volatile__ ("mov %[result], pc" : [result] "=r" (dump_regs[15]):);
               printf("\n\r");
			for(i =0; i < 16; i++){
				printf("dump[%d] = 0x%08x\n\r", i, dump_regs[i]);
			}

			if (InterruptCounter >= INTERRUPT_COUNT_TIMEOUT_VALUE) {
				// Break out of the while loop

				break;
			}

		}
	}


	// Print a message to the UART to show that we've made it out of the while loop
	printf("If we see this message, then we've broken out of the while loop\n\r");

	// Disable interrupts in the Processor.
	Xil_ExceptionDisable();

	// Disconnect the interrupt for the Timer.
	XScuGic_Disconnect(&my_Gic, XPAR_SCUTIMER_INTR);





	cleanup_platform();
	return 0;
}

static void my_timer_interrupt_handler(void *CallBackRef) {
	// The Xilinx drivers automatically pass an instance of
	// the peripheral which generated in the interrupt into this
	// function, using the special parameter called "CallBackRef".
	// We will locally declare an instance of the timer, and assign
	// it to CallBackRef.  You'll see why in a minute.
	XScuTimer *my_Timer_LOCAL = (XScuTimer *) CallBackRef;
	int i = 0;
	int dump_registers[16];
    int dump_regs[16];
	int randword;
	int randbit;
	int word;

	// Here we'll check to see if the timer counter has expired.
	// Technically speaking, this check is not necessary.
	// We know that the timer has expired because that's the
	// reason we're in this handler in the first place!
	// However, this is an example of how a callback reference
	// can be used as a pointer to the instance of the timer
	// that expired.  If we had two timers then we could use the same
	// handler for both, and the "CallBackRef" would always tell us
	// which timer had generated the interrupt.

	if (XScuTimer_IsExpired(my_Timer_LOCAL) && InterruptCounter < INTERRUPT_COUNT_TIMEOUT_VALUE ) {
		// Clear the interrupt flag in the timer, so we don't service
		// the same interrupt twice.
		XScuTimer_ClearInterruptStatus(my_Timer_LOCAL);

		// Increment a counter so that we know how many interrupts
		// have been generated.  The counter is a global variable
		InterruptCounter++;


		printf("\n\r** This message comes from the interrupt handler! **\n\r\n\n\r");


		__asm __volatile__("push {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, sp, pc}");
		__asm __volatile__ ("mov %[result], r0" : [result] "=r" (dump_regs[0]):);
		__asm __volatile__ ("mov %[result], r1" : [result] "=r" (dump_regs[1]):);
		__asm __volatile__ ("mov %[result], r2" : [result] "=r" (dump_regs[2]):);
		__asm __volatile__ ("mov %[result], r3" : [result] "=r" (dump_regs[3]):);
		__asm __volatile__ ("mov %[result], r4" : [result] "=r" (dump_regs[4]):);
		__asm __volatile__ ("mov %[result], r5" : [result] "=r" (dump_regs[5]):);
		__asm __volatile__ ("mov %[result], r6" : [result] "=r" (dump_regs[6]):);
		__asm __volatile__ ("mov %[result], r7" : [result] "=r" (dump_regs[7]):);
		__asm __volatile__ ("mov %[result], r8" : [result] "=r" (dump_regs[8]):);
		__asm __volatile__ ("mov %[result], r9" : [result] "=r" (dump_regs[9]):);
		__asm __volatile__ ("mov %[result], r10" : [result] "=r" (dump_regs[10]):);
		__asm __volatile__ ("mov %[result], r11" : [result] "=r" (dump_regs[11]):);
		__asm __volatile__ ("mov %[result], r12" : [result] "=r" (dump_regs[12]):);
		__asm __volatile__ ("mov %[result], lr" : [result] "=r" (dump_regs[13]):);
		__asm __volatile__ ("mov %[result], sp" : [result] "=r" (dump_regs[14]):);
		__asm __volatile__ ("mov %[result], pc" : [result] "=r" (dump_regs[15]):);

		for(i =0; i < 16; i++){
			printf("dump[%d] = 0x%08x\n\r", i, dump_regs[i]);
		}



         word = 0xABCD;


 		/* IT´S WORKING CHANGE r6 r10*/
	/*    __asm __volatile__ ("mov  r6, %[result]" : [result] "=r" (word):);
		__asm __volatile__ ("mov  r7, %[result]" : [result] "=r" (word):);
		__asm __volatile__ ("mov  r8, %[result]" : [result] "=r" (word):);
		__asm __volatile__ ("mov  r9, %[result]" : [result] "=r" (word):);
		__asm __volatile__ ("mov  r10, %[result]" : [result] "=r" (word):);
*/
		/* r11 need to be change not significant because can give a data abort fault error*/

	/*	  word = dump_regs[11]+12;
		  __asm __volatile__ ("mov  r11, %[result]" : [result] "=r" (word):);
   */



		/* i can change the pc here but the program locks on the back of the interrupt */
		//__asm __volatile__ ("mov  pc, %[result]" : [result] "=r" (word):);


         /*Change at r0-r3, r12, lr  need to be at the context saved */
         /* the lr affects directly the pc before the interrupt because this instruction, subs	pc, lr, #4 ,  is used to adjust the pc return


		/* r5 r4 can i change? */
	   //  	__asm __volatile__ ("mov  r4, %[result]" : [result] "=r" (word):);
		//__asm __volatile__ ("mov  r5, %[result]" : [result] "=r" (word):);


		/* GERANDO BITFLIP ALEATORIO*/
/*
		   srand(400);
	   randword = (rand()%15)*4;
       word = Xil_In32(ContextAddress+randword);
       printf("\n\r word = 0x%08x", word);
       randbit = rand()%32;
       word = word ^ randbit;
	   printf("\n\r randword = %d - randbit = %d - word = 0x%08x\n\r", randword/i, randbit, word);

	   Xil_Out32( ContextAddress, 0xABCD);
*/

		/*
		for(i =0; i < 16; i++){
				word = Xil_In32(0x00118138+i*4);
				printf("\n\ 0x%08x = 0x%08x\n\r", 0x00118138-i*4, word);
			}
			printf("\n\r Aqui \n\r");
			for(i =0; i < 64; i++){
				word = Xil_In32(0x00118138+i*4);
				printf("\n\ 0x%08x = 0x%08x\n\r", 0x00118138+i*4, word);
			}

			printf("\n\r \n\r");

			for(i =0; i < 16; i++){
			       word = Xil_In32(ContextAddress+i*4);
				   printf("\n\ 0x%08x = 0x%08x\n\r", ContextAddress+i*4, word);
				   Xil_Out32( ContextAddress+4*i, 0xabcd);
			}

			Xil_Out32( 0x00118134, 0xABCD);
*/
		// Print something to the UART to show that we're in the interrupt handler
//		printf("\n\r** This message comes from the interrupt handler! (%d) **\n\r\n\n\r", InterruptCounter);


		/*Injection of  ERROR IN DATA*/
		/*
			for(i=0; i<=64; i++){
       Xil_Out32( 0x00114080+4*i, 12345678);
    }
		 */


	}
	// Check to see if we've had more than the defined number of interrupts
	else {
		// Stop the timer from automatically re-loading, so
		// that we don't get any more interrupts.
		// We couldn't do this if we didn't have the CallBackRef

		XScuTimer_DisableAutoReload(my_Timer_LOCAL);

	}
}
