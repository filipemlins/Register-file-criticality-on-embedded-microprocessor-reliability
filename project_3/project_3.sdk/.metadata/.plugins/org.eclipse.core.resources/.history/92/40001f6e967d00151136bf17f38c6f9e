/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * XILINX CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Cçonfigurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xscutimer.h"
#include "xparameters.h"
#include "xscugic.h"
#include "xil_io.h"
#include <time.h>
#include <stdlib.h>
#include <xtime_l.h>

#define INTERRUPT_COUNT_TIMEOUT_VALUE  1
#define INTERRUPT_COUNT_TIMEOUT_VALUE2 1

// Function prototypes
static void my_timer_interrupt_handler(void *CallBackRef);
// Global variables
int InterruptCounter = 0;
int InterruptCounter2 = 0;

/* MULTIPLICACAO DE MATRIZES*/
#define MATRIX_SIZE 25

typedef unsigned long MATRIX_TYPE[MATRIX_SIZE][MATRIX_SIZE];

int mem[(sizeof(MATRIX_TYPE) / sizeof(int)) * 3];

MATRIX_TYPE* A = (MATRIX_TYPE *) &mem[(0 * sizeof(MATRIX_TYPE)) / sizeof(int)];

MATRIX_TYPE* B = (MATRIX_TYPE *) &mem[(1 * sizeof(MATRIX_TYPE)) / sizeof(int)];

MATRIX_TYPE* C = (MATRIX_TYPE *) &mem[(2 * sizeof(MATRIX_TYPE)) / sizeof(int)];

void init_matrix(MATRIX_TYPE M, int value) {
	int i, j;

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j++) {
			M[i][j] = value;
		}
	}
}

void multi_matrix(MATRIX_TYPE A, MATRIX_TYPE B, MATRIX_TYPE C) {
	int i, j;

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j++) {
			int k;
			int sum = 0;
			for (k = 0; k < MATRIX_SIZE; k++) {
				sum += A[i][k] * B[k][j];
			}
			C[i][j] = sum;
		}
	}

}

void print_matrix(MATRIX_TYPE C) {
	int i, j;

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j++) {
			printf("C[%d][%d] = %d \n\r", i, j, C[i][j]);

		}
	}
}


int verify_matrix(MATRIX_TYPE C){
	int i, j;

	for (i = 0; i < MATRIX_SIZE; i++) {
		for (j = 0; j < MATRIX_SIZE; j++) {
			if(C[i][j] != MATRIX_SIZE*2){
				printf("FAILED\n\r");
				return -1;
			}
		}
	}
    return 0;

}


void print_regs(){
	static unsigned int dump_regs[16] = { 0xFFFF };
    int i;

	__asm __volatile__("push {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, sp, pc}");
	__asm __volatile__ ("mov %[result], r0" : [result] "=r" (dump_regs[0]):);
	__asm __volatile__ ("mov %[result], r1" : [result] "=r" (dump_regs[1]):);
	__asm __volatile__ ("mov %[result], r2" : [result] "=r" (dump_regs[2]):);
	__asm __volatile__ ("mov %[result], r3" : [result] "=r" (dump_regs[3]):);
	__asm __volatile__ ("mov %[result], r4" : [result] "=r" (dump_regs[4]):);
	__asm __volatile__ ("mov %[result], r5" : [result] "=r" (dump_regs[5]):);
	__asm __volatile__ ("mov %[result], r6" : [result] "=r" (dump_regs[6]):);
	__asm __volatile__ ("mov %[result], r7" : [result] "=r" (dump_regs[7]):);
	__asm __volatile__ ("mov %[result], r8" : [result] "=r" (dump_regs[8]):);
	__asm __volatile__ ("mov %[result], r9" : [result] "=r" (dump_regs[9]):);
	__asm __volatile__ ("mov %[result], r10" : [result] "=r" (dump_regs[10]):);
	__asm __volatile__ ("mov %[result], r11" : [result] "=r" (dump_regs[11]):);
	__asm __volatile__ ("mov %[result], r12" : [result] "=r" (dump_regs[12]):);
	__asm __volatile__ ("mov %[result], lr" : [result] "=r" (dump_regs[13]):);
	__asm __volatile__ ("mov %[result], sp" : [result] "=r" (dump_regs[14]):);
	__asm __volatile__ ("mov %[result], pc" : [result] "=r" (dump_regs[15]):);

	printf("\n\r");
	for (i = 0; i < 16; i++) {
		printf("dump[%d] = 0x%08x\n\r", i, dump_regs[i]);
	}

}

int main() {
	// Declare variables that we'll use later
	int Status;
	static unsigned int dump_regs[16] = { 0xFFFF };
	int i;
	int TimerRate;
	XScuTimer my_Timer;
	XScuTimer_Config *Timer_Config;

	int TimerRate2;
	XScuTimer my_Timer2;
	XScuTimer_Config *Timer_Config2;


	XScuGic my_Gic;
	XScuGic_Config *Gic_Config;


	XScuGic my_Gic2;
	XScuGic_Config *Gic_Config2;


	XTime Xtime;
	XTime Xtime2;

	XTime_GetTime(&Xtime);

	srand(Xtime);

	TimerRate = rand()%99+1;

	Gic_Config = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	XScuGic_CfgInitialize(&my_Gic, Gic_Config, Gic_Config->CpuBaseAddress);

	Timer_Config = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	XScuTimer_CfgInitialize(&my_Timer, Timer_Config, Timer_Config->BaseAddr);

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler, &my_Gic);
	XScuGic_Connect(&my_Gic, XPAR_SCUTIMER_INTR,
			(Xil_ExceptionHandler) my_timer_interrupt_handler,
			(void *) &my_Timer);

	XScuGic_Enable(&my_Gic, XPAR_SCUTIMER_INTR);

	XScuTimer_EnableInterrupt(&my_Timer);

	Xil_ExceptionEnable();

	// Load the timer with a value that represents one second of real time
	// HINT: The SCU Timer is clocked at half the frequency of the CPU.
	//XScuTimer_LoadTimer(&my_Timer, XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ);
	XScuTimer_LoadTimer(&my_Timer, XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ/(1000000*TimerRate));

	// Enable Auto reload mode on the timer.  When it expires, it re-loads
	// the original value automatically.  This means that the timing interval
	// is never skewed by the time taken for the interrupt handler to run
	XScuTimer_EnableAutoReload(&my_Timer);




	TimerRate2 = rand()%99+1;

	Gic_Config2 = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	XScuGic_CfgInitialize(&my_Gic2, Gic_Config2, Gic_Config2->CpuBaseAddress);


	Timer_Config2 = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	XScuTimer_CfgInitialize(&my_Timer2, Timer_Config2, Timer_Config2->BaseAddr);

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_IRQ_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler, &my_Gic2);
	XScuGic_Connect(&my_Gic2, XPAR_SCUTIMER_INTR,
			(Xil_ExceptionHandler) my_timer_interrupt_handler2,
			(void *) &my_Timer2);

	XScuGic_Enable(&my_Gic, XPAR_SCUTIMER_INTR);

	XScuTimer_EnableInterrupt(&my_Timer2);


	// Load the timer with a value that represents one second of real time
	// HINT: The SCU Timer is clocked at half the frequency of the CPU.
	//XScuTimer_LoadTimer(&my_Timer, XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ);
	XScuTimer_LoadTimer(&my_Timer2, XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ/(1000000*TimerRate));

	// Enable Auto reload mode on the timer.  When it expires, it re-loads
	// the original value automatically.  This means that the timing interval
	// is never skewed by the time taken for the interrupt handler to run
	XScuTimer_EnableAutoReload(&my_Timer2);









	// Create an infinite loop of nothing-ness
	while (1) {

		// There's nothing in here, the processor will just sit doing nothing.
		// The only way we'll see messages on the UART is if there's an interrupt.
		// In a real application, this is where the rest of our code would be.


		XScuTimer_Start(&my_Timer2);
		XScuTimer_Start(&my_Timer);

		init_matrix( *A, 2);

		init_matrix( *B, 1);

		init_matrix( *C, 0);

		multi_matrix( *A, *B, *C );

		XScuTimer_Stop(&my_Timer);
		XScuTimer_Stop(&my_Timer2);

	//	print_matrix( *C );

		Status = verify_matrix(*C);
		if(Status != 0){
          return Status;
          break;
		}
		else{
			printf("SUCCESS \n\r");
			InterruptCounter = 0;
		    XTime_GetTime(&Xtime);

			srand(Xtime);
			TimerRate = rand()%99+1;
			XScuTimer_LoadTimer(&my_Timer, XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ/(1000000*TimerRate));

			XScuTimer_EnableAutoReload(&my_Timer);

			InterruptCounter2 = 0;

			XTime_GetTime(&Xtime2);

			srand(Xtime2);
			TimerRate = rand()%99+1;
			XScuTimer_LoadTimer(&my_Timer, XPAR_PS7_CORTEXA9_0_CPU_CLK_FREQ_HZ/(1000000*TimerRate2));

			XScuTimer_EnableAutoReload(&my_Timer2);


		}

	}

	// Print a message to the UART to show that we've made it out of the while loop

	// Disable interrupts in the Processor.
	Xil_ExceptionDisable();

	// Disconnect the interrupt for the Timer.
	XScuGic_Disconnect(&my_Gic, XPAR_SCUTIMER_INTR);

	cleanup_platform();
	return 0;
}

static void my_timer_interrupt_handler(void *CallBackRef) {
	// The Xilinx drivers automatically pass an instance of
	// the peripheral which generated in the interrupt into this
	// function, using the special parameter called "CallBackRef".
	// We will locally declare an instance of the timer, and assign
	// it to CallBackRef.  You'll see why in a minute.
	XScuTimer *my_Timer_LOCAL = (XScuTimer *) CallBackRef;
	int i;
	int randword;
	int randbit;
	int word;
	// r0 r1 r2 r3 r4 r5 r11 r12 r13
	int RegsAddress[9] = {0x0011a1b8, 0x0011a1bc, 0x0011a1c0, 0x0011a1c4, 0x0011a0dc, 0x0011a0e0, 0x0011a0d0, 0x0011a1c8, 0x0011a1cc};

	// Here we'll check to see if the timer counter has expired.
	// Technically speaking, this check is not necessary.
	// We know that the timer has expired because that's the
	// reason we're in this handler in the first place!
	// However, this is an example of how a callback reference
	// can be used as a pointer to the instance of the timer
	// that expired.  If we had two timers then we could use the same
	// handler for both, and the "CallBackRef" would always tell us
	// which timer had generated the interrupt.

	if (XScuTimer_IsExpired(my_Timer_LOCAL) && InterruptCounter < INTERRUPT_COUNT_TIMEOUT_VALUE) {
		// Clear the interrupt flag in the timer, so we don't service
		// the same interrupt twice.
		XScuTimer_ClearInterruptStatus(my_Timer_LOCAL);

		// Increment a counter so that we know how many interrupts
		// have been generated.  The counter is a global variable
		InterruptCounter++;


		/*Way to find the registers */
		/*
		for (i = 0; i<2000; i++){
					word = Xil_In32(0x00118500+i*4);
					printf("\n\r 0x%08x = 0x%08x", 0x00118500+i*4, word);
				}

		 */

       /*Imprime os registradores salvos no contexto */

	    for (i = 0; i<9; i++){
			word = Xil_In32(RegsAddress[i]);
			printf("\n\r word = 0x%08x", word);
		}



		 /*GERANDO BITFLIP ALEATORIO*/

		for (i = 0; i < 1; i++){
			randword = (rand()%14);

			if(randword <= 5){
				word = Xil_In32(RegsAddress[randword]);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				Xil_Out32(RegsAddress[randword], word);
			}

			else if(randword == 6 ){
				__asm __volatile__ ("mov %[result], r6" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r6, %[result]" : [result] "=r" (word):);
			}

			else if( randword == 7){
				__asm __volatile__ ("mov %[result], r7" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r7, %[result]" : [result] "=r" (word):);
			}
			else if(randword == 8 ){
				__asm __volatile__ ("mov %[result], r8" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r8, %[result]" : [result] "=r" (word):);
			}

			else if( randword == 9){
				__asm __volatile__ ("mov %[result], r9" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r9, %[result]" : [result] "=r" (word):);
			}

			else if(randword == 10 ){
				__asm __volatile__ ("mov %[result], r10" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r10, %[result]" : [result] "=r" (word):);
			}

			else if(randword == 11 || randword == 12 || randword == 13){

				word = Xil_In32(RegsAddress[randword-6]);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				Xil_Out32(RegsAddress[randword], word);

			}
			else if(randword == 13){

				word = Xil_In32(RegsAddress[randword-6]);
				printf("\n\rBefore Bitflip lr = 0x%08x", word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip lr - randbit = %d - word = 0x%08x\n\r",  randbit, word);
				Xil_Out32(RegsAddress[randword], word);

			}
			else if(randword == 14 ){
				__asm __volatile__ ("mov %[result], pc" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip pc = 0x%08x", word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip  pc - randbit = %d - word = 0x%08x\n\r", randbit, word);
				__asm __volatile__ ("mov  pc, %[result]" : [result] "=r" (word):);
			}

		}

                    printf("-------------------------------------------------------\n\r");
	}
	// Check to see if we've had more than the defined number of interrupts
	else {
		// Stop the timer from automatically re-loading, so
		// that we don't get any more interrupts.
		// We couldn't do this if we didn't have the CallBackRef

		XScuTimer_DisableAutoReload(my_Timer_LOCAL);

	}
}












static void my_timer_interrupt_handler2(void *CallBackRef) {
	// The Xilinx drivers automatically pass an instance of
	// the peripheral which generated in the interrupt into this
	// function, using the special parameter called "CallBackRef".
	// We will locally declare an instance of the timer, and assign
	// it to CallBackRef.  You'll see why in a minute.
	XScuTimer *my_Timer_LOCAL = (XScuTimer *) CallBackRef;
	int i;
	int randword;
	int randbit;
	int word;
	// r0 r1 r2 r3 r4 r5 r11 r12 r13
	int RegsAddress[9] = {0x0011a1b8, 0x0011a1bc, 0x0011a1c0, 0x0011a1c4, 0x0011a0dc, 0x0011a0e0, 0x0011a0d0, 0x0011a1c8, 0x0011a1cc};

	// Here we'll check to see if the timer counter has expired.
	// Technically speaking, this check is not necessary.
	// We know that the timer has expired because that's the
	// reason we're in this handler in the first place!
	// However, this is an example of how a callback reference
	// can be used as a pointer to the instance of the timer
	// that expired.  If we had two timers then we could use the same
	// handler for both, and the "CallBackRef" would always tell us
	// which timer had generated the interrupt.

	if (XScuTimer_IsExpired(my_Timer_LOCAL) && InterruptCounter2 < INTERRUPT_COUNT_TIMEOUT_VALUE2) {
		// Clear the interrupt flag in the timer, so we don't service
		// the same interrupt twice.
		XScuTimer_ClearInterruptStatus(my_Timer_LOCAL);

		// Increment a counter so that we know how many interrupts
		// have been generated.  The counter is a global variable
		InterruptCounter2++;


		/*Way to find the registers */
		/*
		for (i = 0; i<2000; i++){
					word = Xil_In32(0x00118500+i*4);
					printf("\n\r 0x%08x = 0x%08x", 0x00118500+i*4, word);
				}

		 */

       /*Imprime os registradores salvos no contexto */

	    for (i = 0; i<9; i++){
			word = Xil_In32(RegsAddress[i]);
			printf("\n\r word = 0x%08x", word);
		}



		 /*GERANDO BITFLIP ALEATORIO*/

		for (i = 0; i < 1; i++){
			randword = (rand()%14);

			if(randword <= 5){
				word = Xil_In32(RegsAddress[randword]);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				Xil_Out32(RegsAddress[randword], word);
			}

			else if(randword == 6 ){
				__asm __volatile__ ("mov %[result], r6" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r6, %[result]" : [result] "=r" (word):);
			}

			else if( randword == 7){
				__asm __volatile__ ("mov %[result], r7" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r7, %[result]" : [result] "=r" (word):);
			}
			else if(randword == 8 ){
				__asm __volatile__ ("mov %[result], r8" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r8, %[result]" : [result] "=r" (word):);
			}

			else if( randword == 9){
				__asm __volatile__ ("mov %[result], r9" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r9, %[result]" : [result] "=r" (word):);
			}

			else if(randword == 10 ){
				__asm __volatile__ ("mov %[result], r10" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				__asm __volatile__ ("mov  r10, %[result]" : [result] "=r" (word):);
			}

			else if(randword == 11 || randword == 12 || randword == 13){

				word = Xil_In32(RegsAddress[randword-6]);
				printf("\n\rBefore Bitflip r%d = 0x%08x", randword, word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip r%d - randbit = %d - word = 0x%08x\n\r", randword, randbit, word);
				Xil_Out32(RegsAddress[randword], word);

			}
			else if(randword == 13){

				word = Xil_In32(RegsAddress[randword-6]);
				printf("\n\rBefore Bitflip lr = 0x%08x", word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip lr - randbit = %d - word = 0x%08x\n\r",  randbit, word);
				Xil_Out32(RegsAddress[randword], word);

			}
			else if(randword == 14 ){
				__asm __volatile__ ("mov %[result], pc" : [result] "=r" (word):);
				printf("\n\rBefore Bitflip pc = 0x%08x", word);
				randbit = rand()%32;
				word = word ^ randbit;
				printf("\n\rAfter Bitflip  pc - randbit = %d - word = 0x%08x\n\r", randbit, word);
				__asm __volatile__ ("mov  pc, %[result]" : [result] "=r" (word):);
			}

		}

                    printf("++++++++++++++++++++++++++++++++++++++++++++++++++\n\r");
	}
	// Check to see if we've had more than the defined number of interrupts
	else {
		// Stop the timer from automatically re-loading, so
		// that we don't get any more interrupts.
		// We couldn't do this if we didn't have the CallBackRef

		XScuTimer_DisableAutoReload(my_Timer_LOCAL);

	}
}

